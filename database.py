import pymysql.cursors
import os
from config import Config


# Singleton Pattern implementation for a database
class DatabaseMeta(type):
    _instance = None

    def __call__(self):
        if self._instance is None:
            self._instance = super().__call__()
        return self._instance


class Database(metaclass=DatabaseMeta):
    def __init__(self):
        if os.environ.get('TESTING'):
            db = Config.DB_TEST_NAME
        else:
            db = Config.DB_NAME

        self.connection = pymysql.connect(host=Config.DB_HOST,
                                          user=Config.DB_USER,
                                          password=Config.DB_PASS,
                                          db=db,
                                          charset='utf8mb4',
                                          cursorclass=pymysql.cursors.DictCursor)

    def get_cpe_count(self):
        with self.connection.cursor() as cursor:
            sql = "SELECT COUNT(*) AS cnt FROM cpes"
            cursor.execute(sql)
            result = cursor.fetchone()['cnt']

        return result

    def get_cpes(self):
        limit = 20000

        with self.connection.cursor() as cursor:
            sql = "SELECT id FROM cpes LIMIT 1"
            cursor.execute(sql)
            result = cursor.fetchone()
            current = result['id']

            while True:
                sql = "SELECT * FROM cpes c JOIN wfns w " \
                      "ON w.id = c.wfn_id " \
                      "WHERE c.id >= %s " \
                      "LIMIT %s"
                cursor.execute(sql, (current, limit,))
                result = cursor.fetchall()

                if len(result) == 0:
                    break
                current += limit
                yield result

    def get_cpe_entries(self, year=None):
        limit = 20000

        with self.connection.cursor() as cursor:
            if year:
                sql = "SELECT ce.id FROM cpe_entries ce " \
                      "JOIN cves c ON c.id = ce.cve_id " \
                      "WHERE c.cve_id LIKE 'CVE-%s-%%' " \
                      "LIMIT 1"
                cursor.execute(sql, (year,))
            else:
                sql = "SELECT id FROM cpe_entries " \
                      "LIMIT 1"
                cursor.execute(sql)
            result = cursor.fetchone()
            current = result['id']

            while True:
                if year:
                    sql = "SELECT * FROM cpe_entries ce " \
                          "JOIN cves c ON c.id = ce.cve_id WHERE ce.id >= %s AND c.cve_id LIKE 'CVE-%s-%%' " \
                          "LIMIT %s"
                    cursor.execute(sql, (current, year, limit,))
                else:
                    sql = "SELECT * FROM cpe_entries ce " \
                          "JOIN cves c ON c.id = ce.cve_id " \
                          "WHERE ce.id >= %s " \
                          "LIMIT %s"
                    cursor.execute(sql, (current, limit,))
                result = cursor.fetchall()
                if len(result) == 0:
                    break
                current += limit
                yield result

    def get_cpe_entries_count(self, year=None):
        with self.connection.cursor() as cursor:
            if year:
                sql = "SELECT COUNT(*) AS cnt FROM cpe_entries ce " \
                      "JOIN cves c ON c.id = ce.cve_id " \
                      "WHERE c.cve_id LIKE 'CVE-%s-%%'"
                cursor.execute(sql, (year,))
            else:
                sql = "SELECT COUNT(*) AS cnt FROM cpe_entries"
                cursor.execute(sql)
            result = cursor.fetchone()
        return result['cnt']

    def get_cves(self, year=None):
        limit = 20000

        with self.connection.cursor() as cursor:
            if year:
                sql = "SELECT id FROM cves c " \
                      "WHERE c.cve_id LIKE 'CVE-%s-%%' " \
                      "LIMIT 1"
                cursor.execute(sql, (year,))
            else:
                sql = "SELECT id FROM cves " \
                      "LIMIT 1"
                cursor.execute(sql)
            result = cursor.fetchone()
            current = result['id']

            while True:
                if year:
                    sql = "SELECT * FROM cves c " \
                          "WHERE c.id >= %s AND c.cve_id LIKE 'CVE-%s-%%' " \
                          "LIMIT %s"
                    cursor.execute(sql, (current, year, limit,))
                else:
                    sql = "SELECT * FROM cves c " \
                          "WHERE c.id >= %s " \
                          "LIMIT %s"
                    cursor.execute(sql, (current, limit,))
                result = cursor.fetchall()
                if len(result) == 0:
                    break
                current += limit
                yield result

    def get_cves_count(self, year=None):
        with self.connection.cursor() as cursor:
            if year:
                sql = "SELECT COUNT(*) AS cnt " \
                      "FROM cves c " \
                      "WHERE c.cve_id LIKE 'CVE-%s-%%'"
                cursor.execute(sql, (year,))
            else:
                sql = "SELECT COUNT(*) as cnt FROM cves"
                cursor.execute(sql)
            result = cursor.fetchone()
        return result['cnt']

    def get_cve(self, cve_id):
        with self.connection.cursor() as cursor:
            sql = "SELECT * FROM cves " \
                  "WHERE id = %s"
            cursor.execute(sql, (cve_id,))
            result = cursor.fetchone()

        return result

    def get_cpes_from_cve(self, cve_id):
        with self.connection.cursor() as cursor:
            sql = "SELECT * FROM cpe_entries " \
                  "WHERE cve_id = %s"
            cursor.execute(sql, (cve_id,))
            result = cursor.fetchall()

        return result

    def get_impact(self, impact_id):
        with self.connection.cursor() as cursor:
            sql = "SELECT * FROM impacts " \
                  "WHERE id = %s"
            cursor.execute(sql, (impact_id,))
            result = cursor.fetchone()

        return result

    def get_access(self, access_id):
        with self.connection.cursor() as cursor:
            sql = "SELECT * FROM accesses " \
                  "WHERE id = %s"
            cursor.execute(sql, (access_id,))
            result = cursor.fetchone()

        return result

    def get_cpe_vendors_by_wfn_product(self, product):
        with self.connection.cursor() as cursor:
            sql = "SELECT DISTINCT cpes.uri_binding, wfns.vendor FROM `cpes` " \
                  "JOIN wfns ON wfns.id = cpes.wfn_id " \
                  "WHERE wfns.product LIKE %s"
            cursor.execute(sql, ("%" + product + "%",))
            results = cursor.fetchall()

        return results
