from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, DateTime, \
     ForeignKey, event, Text
from sqlalchemy.orm import scoped_session, sessionmaker, backref, relation
from sqlalchemy.ext.declarative import declarative_base
from schemas import cpe_schema, cve_schema
from config import Config
import os


if os.environ.get('TESTING'):
    db = Config.DB_TEST_NAME
else:
    db = Config.DB_NAME

engine = create_engine(f"mysql+pymysql://{Config.DB_USER}:{Config.DB_PASS}@{Config.DB_HOST}/{db}")
db_session = scoped_session(sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))

def init_db():
    Model.metadata.create_all(bind=engine)


Model = declarative_base(name='Model')
Model.metadata.bind = engine
Model.query = db_session.query_property()

class Access(Model):
    __tablename__ = 'accesses'
    id = Column(Integer, primary_key=True)
    authentication = Column(String(200))
    complexity = Column(String(200))
    vector = Column(String(200))

class Impact(Model):
    __tablename__ = 'impacts'
    id = Column(Integer, primary_key=True)
    availability = Column(String(200))
    confidentiality = Column(String(200))
    integrity = Column(String(200))

class CVE(Model):
    __tablename__ = 'cves'
    id = Column(Integer, primary_key=True)
    cve_id = Column(String(20))
    assigner = Column(String(50))
    published = Column(String(50))
    modified = Column(String(50))
    summary = Column(Text())
    access_id = Column(Integer, ForeignKey('accesses.id'))
    access = relation(Access, backref=backref('cves', lazy='dynamic'))
    impact_id = Column(Integer, ForeignKey('impacts.id'))
    impact = relation(Impact, backref=backref('cves', lazy='dynamic'))
    cvss = Column(String(10))
    cvss_time = Column(String(50))
    cvss_vector = Column(String(50))
    cwe = Column(String(20))
    references = relation('Reference', backref='cves', lazy=True)
    cpe_entries = relation('CPEEntry', backref='cves', lazy=True)


    # @property
    # def cpe_entries(self):
    #     return [ce.cpe_entry for ce in CPEEntry.query.filter_by(cve_id=self.id).all()]
    #
    # @property
    # def references(self):
    #     return [r.reference for r in Reference.query.filter_by(cve_id=self.id).all()]

    @property
    def serialized(self):
        return cve_schema.dump(self)

class CPEEntry(Model):
    __tablename__ = 'cpe_entries'
    id = Column(Integer, primary_key=True)
    cpe_entry = Column(String(200))
    cve_id = Column(Integer, ForeignKey('cves.id'))
    # cve = relation(CVE, backref=backref('cpe_entries', lazy='dynamic'))

    @property
    def cve(self):
        return CVE.query.get(self.cve_id)

class Reference(Model):
    __tablename__ = 'refs'
    id = Column(Integer, primary_key=True)
    reference = Column(String(500))
    cve_id = Column(Integer, ForeignKey('cves.id'))

class WFN(Model):
    __tablename__ = 'wfns'
    id = Column(Integer, primary_key=True)
    part = Column(String(200))
    vendor = Column(String(200))
    product = Column(String(200))
    version = Column(String(200))
    update = Column(String(200))
    edition = Column(String(200))
    language = Column(String(200))
    sw_edition = Column(String(200))
    target_sw = Column(String(200))
    target_hw = Column(String(200))
    other = Column(String(200))


class CPE(Model):
    __tablename__ = 'cpes'
    id = Column(Integer, primary_key=True)
    uri_binding = Column(String(200))
    wfn_id = Column(Integer, ForeignKey('wfns.id'))
    wfn = relation(WFN, backref=backref('cpes', lazy=True))
    formatted_string_binding = Column(String(200))

    @property
    def serialized(self):
        return cpe_schema.dump(self)

