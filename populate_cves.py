import json
import pprint
import sys
import os.path
from dateutil.parser import parse as parse_datetime
import sqlite3
import logging
import progressbar
import os
from models import *
from dbcli import init_db

CVE_FEEDS_DIR = 'cve_feeds'
logging.basicConfig(level=logging.INFO, format="%(message)s")


defaultvalue = {}
defaultvalue['cwe'] = "Unknown"


def add_if_missing(cve, key, value):
    if value not in cve[key]:
        cve[key].append(value)
    return cve


def process_cve_item(item=None):
    if item is None:
        return None
    cve = {}
    cve['id'] = item['cve']['CVE_data_meta']['ID']
    cve['assigner'] = item['cve']['CVE_data_meta']['ASSIGNER']
    cve['Published'] = str(parse_datetime(item['publishedDate'], ignoretz=True))
    cve['Modified'] = str(parse_datetime(item['lastModifiedDate'], ignoretz=True))
    for description in item['cve']['description']['description_data']:
        if description['lang'] == 'en':
            if "summary" in cve:
                cve['summary'] += " {}".format(description['value'])
            else:
                cve['summary'] = description['value']
    if 'impact' in item:
        cve['access'] = {}
        cve['impact'] = {}
        if 'baseMetricV2' in item['impact']:
            cve['access']['authentication'] = item['impact']['baseMetricV2']['cvssV2']['authentication']
            cve['access']['complexity'] = item['impact']['baseMetricV2']['cvssV2']['accessComplexity']
            cve['access']['vector'] = item['impact']['baseMetricV2']['cvssV2']['accessVector']
            cve['impact']['availability'] = item['impact']['baseMetricV2']['cvssV2']['availabilityImpact']
            cve['impact']['confidentiality'] = item['impact']['baseMetricV2']['cvssV2']['confidentialityImpact']
            cve['impact']['integrity'] = item['impact']['baseMetricV2']['cvssV2']['integrityImpact']
            cve['cvss'] = float(item['impact']['baseMetricV2']['cvssV2']['baseScore'])
            cve['cvss-time'] = str(parse_datetime(item['lastModifiedDate'],
                                              ignoretz=True))  # NVD JSON lacks the CVSS time which was present in the original XML format
            cve['cvss-vector'] = item['impact']['baseMetricV2']['cvssV2']['vectorString']
        else:
            cve['cvss'] = float(5)
            cve['access']['authentication'] = 'UNDEFINED'
            cve['access']['complexity'] = 'UNDEFINED'
            cve['access']['vector'] = 'UNDEFINED'
            cve['impact']['availability'] = 'UNDEFINED'
            cve['impact']['confidentiality'] = 'UNDEFINED'
            cve['impact']['integrity'] = 'UNDEFINED'
            cve['cvss-time'] = 'UNDEFINED'
            cve['cvss-vector'] = 'UNDEFINED'
    if 'references' in item['cve']:
        cve['references'] = []
        for ref in item['cve']['references']['reference_data']:
            cve['references'].append(ref['url'])
    if 'configurations' in item:
        cve['cpe_entries'] = []
        for cpe in item['configurations']['nodes']:
            if 'cpe_match' in cpe:
                for cpeuri in cpe['cpe_match']:
                    cve = add_if_missing(cve, "cpe_entries", cpeuri["cpe23Uri"])
            if 'children' in cpe:
                for child in cpe['children']:
                    if 'cpe_match' in child:
                        for cpeuri in child['cpe_match']:
                            cve = add_if_missing(cve, "cpe_entries", cpeuri["cpe23Uri"])
    if 'problemtype' in item['cve']:
        for problem in item['cve']['problemtype']['problemtype_data']:
            for cwe in problem[
                'description']:  # NVD JSON not clear if we can get more than one CWE per CVE (until we take the last one) - NVD-CWE-Other??? list?
                if cwe['lang'] == 'en':
                    cve['cwe'] = cwe['value']
        if not ('cwe' in cve):
            cve['cwe'] = defaultvalue['cwe']
    else:
        cve['cwe'] = defaultvalue['cwe']
    cve['vulnerable_configuration_cpe_2_2'] = []
    return cve


def parse_cpe(cpe_string):
    _, cpe_version, cpe_type, vendor, name, version = cpe_string.split(':')[:6]
    # other fields are not still required
    return {
        'name': name,
        'version': version
    }


def gen_filenames(year=None):
    if year:
        years = [year]
    else:
        years = ['2002', '2003', '2004',
                 '2005', '2006', '2007', '2008', '2009', '2010',
                 '2011', '2012', '2013', '2014', '2015', '2016',
                 '2017', '2018', '2019', '2020']

    filenames = []
    for year in years:
        filenames.append(os.path.join(CVE_FEEDS_DIR, 'nvdcve-1.1-%s.json' % year))

    return filenames


def main():
    year = None
    if len(sys.argv) == 2:
        year = sys.argv[1]

    filenames = gen_filenames(year)



    cve_list = []
    for filename in filenames:
        logging.info('Handling %s' % filename)
        with open(filename, encoding='utf-8') as f:
            if os.environ.get('TESTING'):
                cvej = json.load(f)['CVE_Items'][:5]
            else:
                cvej = json.load(f)['CVE_Items']

        with progressbar.ProgressBar(max_value=len(cvej)) as bar:
            for idx, cveitem in enumerate(cvej):
                item = process_cve_item(item=cveitem)

                if '** REJECT **  DO NOT USE THIS CANDIDATE NUMBER.' in item['summary']:
                    bar.update(idx)
                    continue

                cve = CVE()
                cve.cve_id = item['id']
                cve.summary = item['summary']
                cve.assigner = item['assigner']
                cve.published = item['Published']
                cve.modified = item['Modified']
                cve.cvss = item['cvss'],
                cve.cvss_time = item['cvss-time']
                cve.cvss_vector = item['cvss-vector']
                cve.cwe = item['cwe']
                cve.access = Access(
                    authentication=item['access']['authentication'],
                    complexity=item['access']['complexity'],
                    vector=item['access']['vector']
                )
                cve.impact = Impact(
                    availability=item['impact']['availability'],
                    confidentiality=item['impact']['confidentiality'],
                    integrity=item['impact']['integrity'],
                )
                cve.references = []
                for ref in item['references']:
                    cve.references.append(Reference(reference=ref))

                cve.cpe_entries = []
                for ce in item['cpe_entries']:
                    cve.cpe_entries.append(CPEEntry(cpe_entry=ce))

                db_session.add(cve)
                db_session.commit()

                # with sqlite3.connect('iva.db') as con:
                #     cur = con.cursor()
                #
                #     query = "INSERT INTO accesses (authentication, complexity, vector) VALUES (?, ?, ?)"
                #     cur.execute(query, (
                #         item['access']['authentication'],
                #         item['access']['complexity'],
                #         item['access']['vector'],
                #     ))
                #     access_id = cur.lastrowid
                #
                #     query = "INSERT INTO impacts (availability, confidentiality, integrity) VALUES (?, ?, ?)"
                #     cur.execute(query, (
                #         item['impact']['availability'],
                #         item['impact']['confidentiality'],
                #         item['impact']['integrity'],
                #     ))
                #     impact_id = cur.lastrowid
                #
                #     query = '''INSERT INTO cves (
                #         cve_id, assigner, published, modified, summary, cvss, cvss_time, cvss_vector, cwe,
                #         access_id, impact_id
                #     ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''
                #     cur.execute(query, (
                #         item['id'],
                #         item['assigner'],
                #         item['Published'],
                #         item['Modified'],
                #         item['summary'],
                #         item['cvss'],
                #         item['cvss-time'],
                #         item['cvss-vector'],
                #         item['cwe'],
                #         access_id,
                #         impact_id,
                #     ))
                #     cve_row_id = cur.lastrowid
                #
                #     query = "INSERT INTO refs (reference, cve_id) VALUES (?, ?)"
                #     for ref in item['references']:
                #         cur.execute(query, (ref, cve_row_id,))
                #
                #     query = "INSERT INTO cpe_entries (cpe_entry, cve_id) VALUES (?, ?)"
                #     for cpe_entry in item['cpe_entries']:
                #         cur.execute(query, (cpe_entry, cve_row_id,))
                #
                #
                #     query = '''INSERT INTO vulnerable_configuration_cpe_2_2s (
                #         vulnerable_configuration_cpe_2_2, cve_id
                #     ) VALUES (?, ?)'''
                #     for vc22 in item['vulnerable_configuration_cpe_2_2']:
                #         cur.execute(query, (vc22, cve_row_id,))
                #
                #     con.commit()

                bar.update(idx)
                # cve_list.append(item)


    with open('cves.json', 'w', encoding='utf-8') as f:
        json.dump(cve_list, f, indent=4)


if __name__ == '__main__':
    main()