#!/usr/bin/env python3
#
# Import script of nvd cpe (Common Platform Enumeration) definition
# into a collection used for human readable lookup of product name.
#
# Imported in cvedb in the collection named cpe.
#
# The format of the collection is the following
#
# { "_id" : ObjectId("50a2739eae24ac2274eae7c0"), "id" :
# "cpe:/a:1024cms:1024_cms:0.7", "title" : "1024cms.org 1024 CMS 0.7" }
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2012 		Wim Remes
# Copyright (c) 2012-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2014-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
import json
import hashlib
import argparse
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import iva_formatter
import progressbar
from models import CPE, WFN, db_session
import os
from dbcli import init_db


# Generates a human readable title from a CPE 2.3 string
def generate_title(cpe):
    title = ""

    cpe_split = cpe.split(":")
    # Do a very basic test to see if the CPE is valid
    if len(cpe_split) == 13:

        # Combine vendor, product and version
        title = " ".join(cpe_split[3:6])

        # If "other" is specified, add it to the title
        if cpe_split[12] != "*":
            title += cpe_split[12]

        # Capitilize each word
        title = title.title()

        # If the target_sw is defined, add "for <target_sw>" to title
        if cpe_split[10] != "*":
            title += " for " + cpe_split[10]

        # In CPE 2.3 spaces are replaced with underscores. Undo it
        title = title.replace("_", " ")

        # Special characters are escaped with \. Undo it
        title = title.replace("\\", "")

    return title


def process_cpe_item(item=None):
    if item is None:
        return None
    if "cpe23Uri" not in item:
        return None

    cpe = {}
    cpe["title"] = generate_title(item["cpe23Uri"])
    cpe["cpe_2_2"] = item["cpe23Uri"]
    cpe["cpe_name"] = item["cpe_name"]
    version_info = ""
    if "versionStartExcluding" in item:
        cpe["versionStartExcluding"] = item["versionStartExcluding"]
        version_info += cpe["versionStartExcluding"]
    if "versionStartIncluding" in item:
        cpe["versionStartIncluding"] = item["versionStartIncluding"]
        version_info += cpe["versionStartIncluding"]
    if "versionEndExcluding" in item:
        cpe["versionEndExcluding"] = item["versionEndExcluding"]
        version_info += cpe["versionEndExcluding"]
    if "versionEndIncluding" in item:
        cpe["versionEndIncluding"] = item["versionEndIncluding"]
        version_info += cpe["versionEndIncluding"]

    sha1_hash = hashlib.sha1(cpe["cpe_2_2"].encode("utf-8") + version_info.encode("utf-8")).hexdigest()
    cpe["id"] = sha1_hash

    return cpe


if __name__ == '__main__':
    with open(os.path.join('cve_feeds', 'nvdcpematch-1.0.json')) as f:
        if os.environ.get('TESTING'):
            cpej = json.load(f)['matches'][:5]
        else:
            cpej = json.load(f)['matches']


    with progressbar.ProgressBar(max_value=len(cpej)) as bar:
        for idx, cpeitem in enumerate(cpej):
            item = process_cpe_item(cpeitem)
            formatted_cpe = iva_formatter.format_cpe(item)
            cpe = CPE()
            cpe.uri_binding = formatted_cpe['uri_binding']
            cpe.formatted_string_binding = formatted_cpe['formatted_string_binding']
            cpe.wfn = WFN()
            cpe.wfn.part = formatted_cpe['wfn']['part']
            cpe.wfn.vendor = formatted_cpe['wfn']['vendor']
            cpe.wfn.product = formatted_cpe['wfn']['product']
            cpe.wfn.version = formatted_cpe['wfn']['version']
            cpe.wfn.update = formatted_cpe['wfn']['update']
            cpe.wfn.edition = formatted_cpe['wfn']['edition']
            cpe.wfn.language = formatted_cpe['wfn']['language']
            cpe.wfn.sw_edition = formatted_cpe['wfn']['sw_edition']
            cpe.wfn.target_sw = formatted_cpe['wfn']['target_sw']
            cpe.wfn.target_hw = formatted_cpe['wfn']['target_hw']
            cpe.wfn.other = formatted_cpe['wfn']['other']
            db_session.add(cpe)
            db_session.commit()

            bar.update(idx)
