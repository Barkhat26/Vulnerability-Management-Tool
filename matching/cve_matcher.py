import editdistance
import logging
import progressbar

from database import Database
from wfn.wfn_converter import WFNConverter
from models import *

logging.basicConfig(level=logging.INFO, format="%(message)s")

class CVEMatcher:

    def __init__(self):
        self.db = Database()
        self.wfn_converter = WFNConverter()

    def search_cves_for_cpe(self, uri_binding):
        wfn = self.wfn_converter.convert_cpe_uri_to_wfn(uri_binding)
        matches_a = self.search_cves(wfn)
        matches_b = self.search_cves_with_summary(wfn)
        merge_lists(matches_a, matches_b)
        return matches_a

    def search_cves(self, wfn):
        cve_matches = []
        vendor = wfn.get('vendor')
        product = wfn.get('product')

        tmp_cve_matches = self.search_cves_by_product_and_vendor(product, vendor)
        # logging.info("Stage 1/3: Found %d CVE matches" % len(tmp_cve_matches))
        # filtered_matches = filter_cpe_entries_in_cve_matches_by_version(tmp_cve_matches, wfn)
        # logging.info("Stage 2/3: Found %d CVE matches" % len(filtered_matches))
        cve_matches.extend(tmp_cve_matches)
        return cve_matches

    def get_vendor_candidates(self, wfn):
        candidates = []
        wfn_vendor = get_vendor_from_wfn(wfn)
        for v in self.inventory.get_vendors():
            if are_strings_similar(v, wfn_vendor):
                candidates.append(v)
        return candidates

    def get_product_candidates(self, wfn):
        candidates = []
        wfn_product = get_product_from_wfn(wfn)
        for p in self.inventory.get_products():
            if are_strings_similar(p, wfn_product):
                candidates.append(p)
        wfn_vendor = get_vendor_from_wfn(wfn)
        if wfn_vendor in wfn_product:
            candidates.append(remove_vendor_from_product(wfn_product, wfn_vendor))
        else:
            candidates.append(add_vendor_to_product(wfn_vendor, wfn_product, 'left'))
            candidates.append(add_vendor_to_product(wfn_vendor, wfn_product, 'right'))
        return candidates

    def search_cves_by_product_and_vendor(self, product, vendor):
        cve_matches = {}
        logging.info("Extracting data from DB...")
        cpe_entries_generator = Database().get_cpe_entries()
        cpe_entries_count = Database().get_cpe_entries_count()
        logging.info("Stage 1/3: searching CVEs by product and vendor")
        with progressbar.ProgressBar(max_value=cpe_entries_count+1) as bar:
            progressbar_idx = 1
            for cpe_entries in cpe_entries_generator:
                for cpe_entry in cpe_entries:
                    wfn = self.wfn_converter.convert_cpe_uri_to_wfn(cpe_entry['cpe_entry'])
                    if wfn.get('product') == product and wfn.get('vendor') == vendor and cpe_entry['cve_id'] not in cve_matches:
                        cve_matches[cpe_entry['cve_id']] = self.create_cve(cpe_entry)
                    progressbar_idx += 1
                    bar.update(progressbar_idx)

        return list(cve_matches.values())

    def get_entries(self):
        db = Database()
        return db.get_cpe_entries()

    def create_cve(self, cpe_entry):
        return {
            'id': cpe_entry['id'],
            'cve_id': cpe_entry['cve_id'],
            'assigner': cpe_entry['assigner'],
            'published': cpe_entry['published'],
            'modified': cpe_entry['modified'],
            'summary': cpe_entry['summary'],
            'access_id': cpe_entry['access_id'],
            'impact_id': cpe_entry['impact_id'],
            'cvss': cpe_entry['cvss'],
            'cvss_time': cpe_entry['cvss_time'],
            'cvss_vector': cpe_entry['cvss_vector'],
            'cwe': cpe_entry['cwe'],
        }

    def search_cves_with_summary(self, wfn):
        matches = []
        cves_count = Database().get_cves_count()
        cves_generator = Database().get_cves()
        logging.info("Stage 3/3: searching CVEs with summary")

        with progressbar.ProgressBar(max_value=cves_count+1) as bar:
            progressbar_idx = 1
            for cves in cves_generator:
                    for idx, cve in enumerate(cves):
                        if is_product_and_vendor_in_cve_summary(cve, wfn):
                            matches.append(cve)
                        progressbar_idx += 1
                        bar.update(idx)
        # logging.info("Stage 3/3: Found %d CVE matches" % len(matches))
        return matches

    def get_cve_without_cpe_entries(self):
        return self.db.search_documents_in_collection({'cpe_entries': {'$size': 0}}, IVA_CVE_COLLECTION)


def is_product_and_vendor_in_cve_summary(cve, wfn):
    summary_words = get_summary_words(cve)
    return is_word_in_summary(get_vendor_from_wfn(wfn), summary_words) and \
           is_word_in_summary(get_product_from_wfn(wfn), summary_words)


def is_word_in_summary(word, summary_words):
    for s_word in summary_words:
        if are_strings_similar(word, s_word):
            return True
    return False


def filter_cpe_entries_in_cve_matches_by_version(cve_matches, wfn):
    filtered_matches = []
    logging.info('Stage 2/3: filtering CVE matches by version')
    with progressbar.ProgressBar(max_value=len(cve_matches)) as bar:
        for idx, cve_match in enumerate(cve_matches):
            updated_cpe_entries = []
            for cve_cpe in get_cpes_from_cve(cve_match):
                if is_main_version_equal(cve_cpe, wfn):
                    updated_cpe_entries.append(cve_cpe)
            if len(updated_cpe_entries) > 0:
                cve_match.cpe_entries = updated_cpe_entries
                filtered_matches.append(cve_match)
            bar.update(idx)
    return filtered_matches


def get_cpes_from_cve(cve):
    db = Database()
    return db.get_cpes_from_cve(cve['id'])


def create_search_condition(product, vendor):
    # return {'cpe_entries': {'$elemMatch': {'$and': [{'wfn.product': product}, {'wfn.vendor': vendor}]}}}
    return {'cpe_entries': {'$elemMatch': {'$and': [{'wfn.product': product}, {'wfn.vendor': vendor}]}}}


def create_aggregation(product, vendor):
    return {'cpe_entries': {'$filter': create_aggregation_filter(product, vendor)}, '_id': 0, 'cve_id': 1, 'cve_summary': 1}


def create_aggregation_filter(product, vendor):
    return {'input': '$cpe_entries', 'as': 'cpe_entries',
            'cond': {'$and': [{'$eq': ['$$cpe_entries.wfn.product', product]},
                              {'$eq': ['$$cpe_entries.wfn.vendor', vendor]}]}}


def is_same_version(cve_cpe, wfn):
    return cve_cpe.get('wfn').get('version') == wfn.get('version')


def is_main_version_equal(cve_cpe, wfn):
    return is_version_any(wfn) or \
           get_main_version(WFNConverter().convert_cpe_uri_to_wfn(cve_cpe['cpe_entry'])) == get_main_version(wfn)


def is_version_any(wfn):
    main_ver = get_main_version(wfn)
    return main_ver == '*' or main_ver == 'ANY'


def get_main_version(wfn):
    return wfn.get('version').split('.')[0]


def merge_lists(list_a, list_b):
    for e in list_b:
        if e not in list_a:
            list_a.append(e)


def are_strings_similar(string_a, string_b):
    return editdistance.eval(string_a, string_b) <= 2


def get_vendor_from_wfn(wfn):
    return wfn.get('vendor').lower()


def get_product_from_wfn(wfn):
    return wfn.get('product').lower()


def get_summary_words(cve):
    summary = str(cve['summary']).lower()
    summary_words = summary.split()
    return summary_words


def remove_vendor_from_product(product, vendor):
    product_without_vendor = product.replace(vendor, '')
    product_without_vendor = product_without_vendor.replace('_', '')
    return product_without_vendor


def add_vendor_to_product(vendor, product, position):
    if position == 'left':
        return vendor + '_' + product
    return product + '_' + vendor
